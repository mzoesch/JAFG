// Copyright 2024 mzoesch. All rights reserved.

#if WITH_TESTS

// ReSharper disable once CppUnusedIncludeDirective
#include "JAFGMacros.h"
#include "Tests/TestHarnessAdapter.h"
#include "Commands/ShippedWorldChatCommands.h"

#define CHECK_SYNTAX_BY_EQUALITY(Description, What, X, Y) \
        CHECK_EQUALS( FString::Printf(TEXT("%s from (%s)"), TEXT(Description), TEXT(What)), X(TEXT(What)), Y )
#define CHECK_SYNTAX_BY_ASSERT(Description, What, X) \
        CHECK_ASSERT( *FString::Printf(TEXT("%s from (%s)"), TEXT(Description), TEXT(What)), X(What) )

TEST_CASE("JAFG.ExternalCore.Commands.Syntax - Byte", "[JAFG.ExternalCore.Commands.Syntax]")
{
    using namespace CommandStatics::Syntax;

    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",    "",  IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   " ",  IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "+",  IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "-",  IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",    "0", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0000", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "+0", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "-0", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",    "1", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0001", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "+1", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "-1", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",  "255", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0255", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "+255", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "-255", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",  "256", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "+256", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "-256", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",  "0x0", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0x00", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",  "0x1", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0x01", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0X01", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0x0F", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0X0F", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0xFF", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0Xff", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0xFG", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "0XFG", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",  "0xF", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",  "0Xf", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",  "0xG", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",  "0XG", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte", "FFFF", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "AA", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "aa", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "FF", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",   "ff", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",    "F", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",    "f", IsByte,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",    "x", IsByte, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte",    "X", IsByte, false )

    CHECK_SYNTAX_BY_ASSERT(   "To Byte",    "",  ToByte              )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte",   " ",  ToByte              )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",   "+",  ToByte,      0b0000 )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte",   "-",  ToByte              )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",    "0", ToByte,      0b0000 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0000", ToByte,      0b0000 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",   "+0", ToByte,      0b0000 )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte",   "-0", ToByte              )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",    "1", ToByte,      0b0001 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0001", ToByte,      0b0001 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",   "+1", ToByte,      0b0001 )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte",   "-1", ToByte              )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",  "255", ToByte, 0b1111'1111 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0255", ToByte, 0b1111'1111 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "+255", ToByte, 0b1111'1111 )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte", "-255", ToByte              )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte",  "256", ToByte              )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte", "+256", ToByte              )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte", "-256", ToByte              )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",  "0x0", ToByte,      0b0000 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0x00", ToByte,      0b0000 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",  "0x1", ToByte,      0b0001 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0x01", ToByte,      0b0001 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0X01", ToByte,      0b0001 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0x0F", ToByte,      0b1111 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0X0F", ToByte,      0b1111 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0xFF", ToByte, 0b1111'1111 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte", "0xff", ToByte, 0b1111'1111 )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte", "0xFG", ToByte              )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte", "0XFG", ToByte              )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",  "0xF", ToByte,      0b1111 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",  "0Xf", ToByte,      0b1111 )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte",  "0xG", ToByte              )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte",  "0XG", ToByte              )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte", "FFFF", ToByte              )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",   "AA", ToByte, 0b1010'1010 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",   "aa", ToByte, 0b1010'1010 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",   "FF", ToByte, 0b1111'1111 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",   "ff", ToByte, 0b1111'1111 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",    "F", ToByte,      0b1111 )
    CHECK_SYNTAX_BY_EQUALITY( "To Byte",    "f", ToByte,      0b1111 )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte",    "x", ToByte              )
    CHECK_SYNTAX_BY_ASSERT(   "To Byte",    "X", ToByte              )

    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",     "", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",    " ", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",    "+", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",    "-", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",    "0", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0000", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",   "+0", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",   "-0", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",    "1", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0001", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",   "+1", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",   "-1", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",  "255", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0255", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "+255", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "-255", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",  "256", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "+256", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "-256", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",  "0x0", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0x00", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",  "0x1", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0x01", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0X01", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0x0F", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0X0F", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0xFF", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0Xff", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0xFG", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "0XFG", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",  "0xF", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",  "0xf", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",  "0xG", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",  "0XG", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check", "FFFF", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",   "AA", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",   "aa", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",   "FF", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",   "ff", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",    "F", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",    "f", IsByte_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",    "x", IsByte_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Byte Range Check",    "X", IsByte_RangeCheck, false )
}

TEST_CASE("JAFG.ExternalCore.Commands.Syntax - Integer32", "[JAFG.ExternalCore.Commands.Syntax]")
{
    using namespace CommandStatics::Syntax;

    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",            "", IsInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",           " ", IsInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",           "+", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",           "-", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",           "0", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",        "0000", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",          "+0", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",          "-0", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",           "1", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",        "0001", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",          "+1", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",        "+001", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",          "-1", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",        "-001", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",         "255", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",        "+255", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",       "+0255", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",        "-255", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",       "-0255", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",           "x", IsInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32",         "0xF", IsInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32", "+2147483646", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32", "+2147483647", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32", "+2147483648", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32", "-2147483647", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32", "-2147483648", IsInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32", "-2147483649", IsInteger32,  true )

    CHECK_SYNTAX_BY_ASSERT(   "To Integer32",            "", ToInteger32              )
    CHECK_SYNTAX_BY_ASSERT(   "To Integer32",           " ", ToInteger32              )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",           "+", ToInteger32,           0 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",           "-", ToInteger32,           0 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",           "0", ToInteger32,           0 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",        "0000", ToInteger32,           0 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",          "+0", ToInteger32,           0 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",          "-0", ToInteger32,          -0 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",           "1", ToInteger32,           1 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",        "0001", ToInteger32,           1 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",          "+1", ToInteger32,           1 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",        "+001", ToInteger32,           1 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",          "-1", ToInteger32,          -1 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",        "-001", ToInteger32,          -1 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",         "255", ToInteger32,         255 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",        "+255", ToInteger32,         255 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",       "+0255", ToInteger32,         255 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",        "-255", ToInteger32,        -255 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32",       "-0255", ToInteger32,        -255 )
    CHECK_SYNTAX_BY_ASSERT(   "To Integer32",           "x", ToInteger32              )
    CHECK_SYNTAX_BY_ASSERT(   "To Integer32",         "0xF", ToInteger32              )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32", "+2147483646", ToInteger32,  2147483646 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32", "+2147483647", ToInteger32,  2147483647 )
    CHECK_SYNTAX_BY_ASSERT(   "To Integer32", "+2147483648", ToInteger32              )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32", "-2147483647", ToInteger32, -2147483647 )
    CHECK_SYNTAX_BY_EQUALITY( "To Integer32", "-2147483648", ToInteger32, -2147483648 )
    CHECK_SYNTAX_BY_ASSERT(   "To Integer32", "-2147483649", ToInteger32              )

    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",            "", IsInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",           " ", IsInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",           "+", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",           "-", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",           "0", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",        "0000", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",          "+0", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",          "-0", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",           "1", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",        "0001", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",          "+1", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",        "+001", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",          "-1", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",        "-001", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",         "255", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",        "+255", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",       "+0255", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",        "-255", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",       "-0255", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",           "x", IsInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check",         "0xF", IsInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check", "+2147483646", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check", "+2147483647", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check", "+2147483648", IsInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check", "-2147483647", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check", "-2147483648", IsInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is Integer32 Range Check", "-2147483649", IsInteger32_RangeCheck, false )

    CHECK_SYNTAX_BY_ASSERT(   "Assumed Integer32 Range Check",            "", AssumedInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed Integer32 Range Check",           " ", AssumedInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",           "+", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",           "-", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",           "0", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",        "0000", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",          "+0", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",          "-0", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",           "1", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",        "0001", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",          "+1", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",        "+001", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",          "-1", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",        "-001", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",         "255", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",        "+255", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",       "+0255", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",        "-255", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check",       "-0255", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed Integer32 Range Check",           "x", AssumedInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed Integer32 Range Check",         "0xF", AssumedInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check", "+2147483646", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check", "+2147483647", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check", "+2147483648", AssumedInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check", "-2147483647", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check", "-2147483648", AssumedInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed Integer32 Range Check", "-2147483649", AssumedInteger32_RangeCheck, false )
}

TEST_CASE("JAFG.ExternalCore.Commands.Syntax - UInteger32", "[JAFG.ExternalCore.Commands.Syntax]")
{
    using namespace CommandStatics::Syntax;

    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",            "", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",           " ", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",           "+", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",           "-", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",           "0", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",        "0000", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",          "+0", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",          "-0", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",           "1", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",        "0001", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",          "+1", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",        "+001", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",          "-1", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",        "-001", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",         "255", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",        "+255", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",       "+0255", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",        "-255", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",       "-0255", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",           "x", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32",         "0xF", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32", "+2147483646", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32", "+2147483647", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32", "+2147483648", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32", "-2147483647", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32", "-2147483648", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32", "-2147483649", IsUInteger32, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32", "+4294967294", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32", "+4294967295", IsUInteger32,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32", "+4294967296", IsUInteger32,  true )

    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",            "", ToUInteger32              )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",           " ", ToUInteger32              )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",           "+", ToUInteger32,           0 )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",           "-", ToUInteger32              )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",           "0", ToUInteger32,           0 )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",        "0000", ToUInteger32,           0 )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",          "+0", ToUInteger32,           0 )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",          "-0", ToUInteger32              )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",           "1", ToUInteger32,           1 )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",        "0001", ToUInteger32,           1 )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",          "+1", ToUInteger32,           1 )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",        "+001", ToUInteger32,           1 )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",          "-1", ToUInteger32              )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",        "-001", ToUInteger32              )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",         "255", ToUInteger32,         255 )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",        "+255", ToUInteger32,         255 )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32",       "+0255", ToUInteger32,         255 )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",        "-255", ToUInteger32              )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",       "-0255", ToUInteger32              )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",           "x", ToUInteger32              )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32",         "0xF", ToUInteger32              )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32", "+2147483646", ToUInteger32, 2147483646u )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32", "+2147483647", ToUInteger32, 2147483647u )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32", "+2147483648", ToUInteger32, 2147483648u )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32", "-2147483647", ToUInteger32              )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32", "-2147483648", ToUInteger32              )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32", "-2147483649", ToUInteger32              )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32", "+4294967294", ToUInteger32, 4294967294u )
    CHECK_SYNTAX_BY_EQUALITY( "To UInteger32", "+4294967295", ToUInteger32, 4294967295u )
    CHECK_SYNTAX_BY_ASSERT(   "To UInteger32", "+4294967296", ToUInteger32              )

    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",            "", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",           " ", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",           "+", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",           "-", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",           "0", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",        "0000", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",          "+0", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",          "-0", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",           "1", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",        "0001", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",          "+1", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",        "+001", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",          "-1", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",        "-001", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",         "255", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",        "+255", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",       "+0255", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",        "-255", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",       "-0255", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",           "x", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check",         "0xF", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check", "+2147483646", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check", "+2147483647", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check", "+2147483648", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check", "-2147483647", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check", "-2147483648", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check", "-2147483649", IsUInteger32_RangeCheck, false )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check", "+4294967294", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check", "+4294967295", IsUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Is UInteger32 Range Check", "+4294967296", IsUInteger32_RangeCheck, false )

    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check",            "", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check",           " ", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",           "+", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check",           "-", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",           "0", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",        "0000", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",          "+0", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check",          "-0", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",           "1", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",        "0001", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",          "+1", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",        "+001", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check",          "-1", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_ASSERT  ( "Assumed UInteger32 Range Check",        "-001", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",         "255", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",        "+255", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check",       "+0255", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check",        "-255", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check",       "-0255", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check",           "x", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check",         "0xF", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check", "+2147483646", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check", "+2147483647", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check", "+2147483648", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check", "-2147483647", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check", "-2147483648", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_ASSERT(   "Assumed UInteger32 Range Check", "-2147483649", AssumedUInteger32_RangeCheck        )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check", "+4294967294", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check", "+4294967295", AssumedUInteger32_RangeCheck,  true )
    CHECK_SYNTAX_BY_EQUALITY( "Assumed UInteger32 Range Check", "+4294967296", AssumedUInteger32_RangeCheck, false )
}

#undef CHECK_SYNTAX_BY_EQUALITY
#undef CHECK_SYNTAX_BY_ASSERT

#endif /* WITH_TESTS */
